/**
 * gulp modules
 */
const gulp = require('gulp');
const buble = require('gulp-buble');
const stylus = require('gulp-stylus');
const rename = require("gulp-rename");
const uglify = require('gulp-uglify');
const plumber = require('gulp-plumber');
const sourcemaps = require('gulp-sourcemaps');
const autoprefixer = require('gulp-autoprefixer');
const rollup = require('rollup');

/**
 * browser Sync
 */
const browserSync = require('browser-sync');
const reload = browserSync.reload;


/**
 * Scripts task
 */
gulp.task('scripts', () => {
  return rollup.rollup({
    entry: "./src/js/slider.js",
  })
  .then((bundle) => {
      bundle.write({
        format: "umd",
        moduleName: "Slider",
        dest: "./dist/js/slider.js",
        sourceMap: false
      });
    })

  .then(rollup.rollup({
    entry: "./src/js/modal.js",
  })
  .then((bundle) => {
      bundle.write({
        format: "umd",
        moduleName: "Modal",
        dest: "./dist/js/modal.js",
        sourceMap: false
      });
    }))

  .then(rollup.rollup({
    entry: "./src/js/accordion.js",
  })
  .then((bundle) => {
      bundle.write({
        format: "umd",
        moduleName: "Accordion",
        dest: "./dist/js/accordion.js",
        sourceMap: false
      });
    }))

  .then(rollup.rollup({
    entry: "./src/js/switcher.js",
  })
  .then((bundle) => {
      bundle.write({
        format: "umd",
        moduleName: "Switcher",
        dest: "./dist/js/switcher.js",
        sourceMap: false
      });
    }))

  .then(rollup.rollup({
    entry: "./src/js/dropdown.js",
  })
  .then((bundle) => {
      bundle.write({
        format: "umd",
        moduleName: "Dropdown",
        dest: "./dist/js/dropdown.js",
        sourceMap: false
      });
    }))

  .then(rollup.rollup({
    entry: "./src/js/dolober.js",
  })
  .then((bundle) => {
      bundle.write({
        format: "umd",
        dest: "./dist/js/dolober.js",
        sourceMap: false
      });
    }))
});

/**
 * Styles task
 */
gulp.task('styles', function () {
    gulp.src('./src/stylus/dolober.styl')
        .pipe(plumber())
        .pipe(sourcemaps.init())
        .pipe(stylus())
        .pipe(rename({
            basename: "dolober",
            suffix: "",
            extname: ".css"
        }))
        .pipe(autoprefixer('last 5 version'))
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('./dist/css'))
        .pipe(reload({stream: true}));
});

/**
 * fonts task
 */
gulp.task('font', () => {
  gulp.src('./src/font/*')
    .pipe(gulp.dest('./dist/font/'));
});

/**
 * Production scripts task
 */
gulp.task('production:scripts', function () {
    gulp.src('./src/**/*.js')
        .pipe(rollup({
            rollup: require('rollup'),
            entry: './src/js/script.js',
            format: 'umd',
            moduleName: 'Dolober'
        }))
        .pipe(buble())
        .pipe(rename({
            basename: "dolober",
            suffix: ".min",
            extname: ".js"
        }))
        .pipe(uglify())
        .pipe(gulp.dest('./dist'));
});


/**
 * production styles task
 */
 gulp.task('production:styles', function () {
    gulp.src('./src/stylus/dolober.styl')
        .pipe(stylus({
            compress: true
        }))
        .pipe(rename({
            basename: "dolober",
            suffix: ".min",
            extname: ".css"
        }))
        .pipe(gulp.dest('./dist/css'));
     })

/**
 * production  task
 */
 gulp.task('production', ['styles', 'scripts', 'production:scripts', 'production:styles']);

 /**
  * Browser-sync task
  */
gulp.task('browser-sync', function () {
    browserSync.init({
       proxy: "dolober.dev/docs/index.html"
   });
})

/**
 * Watch task
 */
gulp.task('watch', function () {
    gulp.watch('./src/js/**/*.js', ['scripts']);
    gulp.watch('./src/stylus/**/*.styl', ['styles']);
    gulp.watch('./**/*.html', function () {
        gulp.src('./**/*.html').pipe(reload({stream: true}));
    });
});

/**
 * Default task
 */
gulp.task('default', ['styles', 'scripts', 'font', 'browser-sync', 'watch']);
