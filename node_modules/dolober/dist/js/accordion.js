(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Accordion = factory());
}(this, (function () { 'use strict';

/*
 * utilities functions
 */
function select(element) {
  if (typeof element === 'string') {
    return document.querySelector(element);
  }
  return element;
}



function sync(callback) {
  setTimeout(() => callback(), 1000 / 60);
}

/**
 * accordion class
 */
class Accordion {
  constructor(selector) {
    this.el = select(selector);
    this.init();
  }

  /**
   * create new rang accordion from element
   */
  init() {
    this.activeItem = this.el.querySelector('.accordion-item.is-active');
    this.titles = [];
    this.titles = Array.from(this.el.querySelectorAll(':scope >.accordion-item >.accordion-title'));
    this.titles.forEach((title) => {
      title.addEventListener('click', () => this.update(title), false);
    });
  }

  /**
   * update accordion states
   * @param {HTMLElement} title
   */
  update(title) {
    const item = title.parentNode;
    if (this.activeItem) {
      this.collapse(this.activeItem);
    }
    if (item !== this.activeItem) {
      this.expand(item);
      this.activeItem = item;
    } else {
      this.activeItem = '';
    }
  }

  /**
   * collapse the open panel
   * @param {HTMLElement} item
   */
  collapse(item) {
    const body = item.querySelector('.accordion-body');
    body.style.height = `${body.clientHeight}px`;
    sync(() => {
      item.classList.remove('is-active');
      body.style.height = '';
    });
  }

  /**
   * expand the close panel
   * @param {HTMLElement} item
   */
  expand(item) {
    const body = item.querySelector('.accordion-body');
    item.classList.add('is-active');
    const height = body.clientHeight;
    body.style.height = '0px';
    sync(() => {
      body.style.height = `${height}px`;
    });
    setTimeout(() => {
      body.style.height = '';
    }, 600);
  }

  /**
   *  automatically create all accordions in the page
   */
  static create() {
    const accordions = Array.from(document.querySelectorAll('.accordion'));
    accordions.forEach((accordion) => {
      new Accordion(accordion);
    });
  }
}

return Accordion;

})));
