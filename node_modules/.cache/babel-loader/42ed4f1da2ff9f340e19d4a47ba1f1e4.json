{"remainingRequest":"/Users/killianpelletier/lagrume-builder/node_modules/babel-loader/lib/index.js!/Users/killianpelletier/lagrume-builder/node_modules/eslint-loader/index.js??ref--12-0!/Users/killianpelletier/lagrume-builder/src/util.js","dependencies":[{"path":"/Users/killianpelletier/lagrume-builder/src/util.js","mtime":1554846638000},{"path":"/Users/killianpelletier/lagrume-builder/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/killianpelletier/lagrume-builder/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/killianpelletier/lagrume-builder/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _Array$from from \"/Users/killianpelletier/lagrume-builder/node_modules/@babel/runtime-corejs2/core-js/array/from\";\nimport _Promise from \"/Users/killianpelletier/lagrume-builder/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _Array$isArray from \"/Users/killianpelletier/lagrume-builder/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _typeof from \"/Users/killianpelletier/lagrume-builder/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport getPath from 'lodash/get';\nimport { types } from 'vuse';\nexport function isObject(obj) {\n  return obj && _typeof(obj) === 'object' && obj !== null && !_Array$isArray(obj);\n}\n;\nexport function isParentTo(target, parent) {\n  var currentNode = target;\n\n  while (currentNode !== null) {\n    if (currentNode === parent) return true;\n    currentNode = currentNode.parentNode;\n  }\n\n  return false;\n}\n/**\n *\n * @param {String} target\n * @param {Object} schema\n */\n\nexport function getTypeFromSchema(target, schema) {\n  var tempTarget = target.split('.');\n  tempTarget.shift();\n  var value = getPath(schema, tempTarget.join('.'));\n  if (value === types.Grid) return 'grid';\n  if (value === types.Text) return 'text';\n  if (value === types.Title) return 'text';\n  if (value === types.Button) return 'button';\n  if (value === types.ClassList) return 'section';\n  if (value === String) return 'text';\n  if (value === Number) return 'text';\n  return null;\n}\nexport function getImageBlob(URL) {\n  return new _Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', URL);\n    xhr.responseType = 'blob';\n\n    xhr.onload = function () {\n      var imageBlob = this.response;\n      var fileType = this.response.type.split('/')[1].split('+')[0];\n      var randomNumber = new Date().getUTCMilliseconds();\n      var filename = \"image-\".concat(randomNumber, \".\").concat(fileType);\n      resolve({\n        blob: imageBlob,\n        name: filename\n      });\n    };\n\n    xhr.send(null);\n  });\n}\nexport function getTypeFromTagName(tagName) {\n  tagName = tagName.toUpperCase();\n\n  switch (tagName) {\n    case 'H1':\n      return 'text';\n\n    case 'H2':\n      return 'text';\n\n    case 'H3':\n      return 'text';\n\n    case 'H4':\n      return 'text';\n\n    case 'H5':\n      return 'text';\n\n    case 'H6':\n      return 'text';\n\n    case 'P':\n      return 'text';\n\n    case 'B':\n      return 'text';\n\n    case 'SPAN':\n      return 'text';\n\n    case 'BUTTON':\n      return 'button';\n\n    case 'A':\n      return 'button';\n\n    case 'SECTION':\n      return 'section';\n\n    case 'HEADER':\n      return 'section';\n\n    default:\n      break;\n  }\n}\nexport function cleanDOM(artboard) {\n  var editables = _Array$from(artboard.querySelectorAll('.is-editable'));\n\n  var uploaders = _Array$from(artboard.querySelectorAll('.uploader'));\n\n  var stylers = _Array$from(artboard.querySelectorAll('.styler'));\n\n  editables.forEach(function (el) {\n    el.contentEditable = 'inherit';\n    el.classList.remove('is-editable');\n  });\n  uploaders.forEach(function (el) {\n    var input = el.querySelector(':scope > input');\n    var image = el.querySelector(':scope > img');\n    image.classList.add('add-full-width');\n    el.classList.remove('uploader');\n    input.remove();\n  });\n  stylers.forEach(function (styler) {\n    styler.remove();\n  });\n}",{"version":3,"sources":["/Users/killianpelletier/lagrume-builder/src/util.js"],"names":["getPath","types","isObject","obj","isParentTo","target","parent","currentNode","parentNode","getTypeFromSchema","schema","tempTarget","split","shift","value","join","Grid","Text","Title","Button","ClassList","String","Number","getImageBlob","URL","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","imageBlob","response","fileType","type","randomNumber","Date","getUTCMilliseconds","filename","blob","name","send","getTypeFromTagName","tagName","toUpperCase","cleanDOM","artboard","editables","querySelectorAll","uploaders","stylers","forEach","el","contentEditable","classList","remove","input","querySelector","image","add","styler"],"mappings":"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","sourcesContent":["import getPath from 'lodash/get';\nimport { types } from 'vuse';\n\nexport function isObject (obj) {\n  return obj && typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n};\n\nexport function isParentTo (target, parent) {\n  let currentNode = target;\n  while (currentNode !== null) {\n    if (currentNode === parent) return true;\n    currentNode = currentNode.parentNode;\n  }\n  return false;\n}\n\n/**\n *\n * @param {String} target\n * @param {Object} schema\n */\nexport function getTypeFromSchema (target, schema) {\n  const tempTarget = target.split('.');\n  tempTarget.shift();\n  const value = getPath(schema, tempTarget.join('.'));\n  if (value === types.Grid) return 'grid';\n  if (value === types.Text) return 'text';\n  if (value === types.Title) return 'text';\n  if (value === types.Button) return 'button';\n  if (value === types.ClassList) return 'section';\n  if (value === String) return 'text';\n  if (value === Number) return 'text';\n\n  return null;\n}\n\nexport function getImageBlob (URL) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', URL);\n    xhr.responseType = 'blob';\n\n    xhr.onload = function () {\n      const imageBlob = this.response;\n      const fileType = this.response.type.split('/')[1].split('+')[0];\n      const randomNumber = new Date().getUTCMilliseconds();\n      const filename = `image-${randomNumber}.${fileType}`;\n      resolve({ blob: imageBlob, name: filename });\n    }\n    xhr.send(null);\n  });\n}\n\nexport function getTypeFromTagName (tagName) {\n  tagName = tagName.toUpperCase();\n  switch (tagName) {\n    case 'H1':\n      return 'text';\n    case 'H2':\n      return 'text';\n    case 'H3':\n      return 'text';\n    case 'H4':\n      return 'text';\n    case 'H5':\n      return 'text';\n    case 'H6':\n      return 'text';\n    case 'P':\n      return 'text';\n    case 'B':\n      return 'text';\n    case 'SPAN':\n      return 'text';\n    case 'BUTTON':\n      return 'button';\n    case 'A':\n      return 'button';\n    case 'SECTION':\n      return 'section';\n    case 'HEADER':\n      return 'section';\n    default:\n      break;\n  }\n}\n\nexport function cleanDOM (artboard) {\n  const editables = Array.from(artboard.querySelectorAll('.is-editable'));\n  const uploaders = Array.from(artboard.querySelectorAll('.uploader'));\n  const stylers = Array.from(artboard.querySelectorAll('.styler'));\n\n  editables.forEach((el) => {\n    el.contentEditable = 'inherit';\n    el.classList.remove('is-editable');\n  });\n  uploaders.forEach((el) => {\n    const input = el.querySelector(':scope > input');\n    const image = el.querySelector(':scope > img');\n\n    image.classList.add('add-full-width');\n    el.classList.remove('uploader');\n    input.remove();\n  });\n  stylers.forEach((styler) => {\n    styler.remove();\n  });\n}\n"]}]}